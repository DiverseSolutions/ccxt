# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import DDoSProtection


class capex(Exchange):

    def describe(self):
        return self.deep_extend(super(capex, self).describe(), {
            'id': 'capex',
            'name': 'capex',
            'countries': ['MN'],
            'rateLimit': 500,
            'requiresWeb3': False,
            'certified': False,
            # new metainfo interface
            'has': {
                'cancelOrder': False,
                'CORS': None,
                'createOrder': False,
                'fetchBalance': False,
                'fetchBidsAsks': False,
                'fetchClosedOrders': False,
                'fetchCurrencies': False,
                'fetchDepositAddress': False,
                'fetchDeposits': False,
                'fetchMarkets': False,
                'fetchMyTrades': False,
                'fetchOHLCV': False,
                'fetchOpenOrders': False,
                'fetchOrder': False,
                'fetchOrderBook': False,
                'fetchOrders': False,
                'fetchTicker': False,
                'fetchTickers': True,
                'fetchTrades': False,
                'fetchWithdrawals': False,
                'withdraw': None,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg',
                'api': {
                    'proxy': 'https://exchange-proxy.krypto.mn/capex',
                },
                'www': 'https://dax.mn',
                'doc': 'https://dax.mn',
            },
            'api': {
                'proxy': {
                    'get': [
                        'tickers',
                        'ohlcv',
                    ],
                },
            },
            'timeframes': {
                '1m': '1',
                '5m': '5',
                '15m': '15',
                '1h': '60',
                '4h': '240',
                '1d': '1440',
            },
        })

    def fetch_tickers(self, symbols=None, params={}):
        response = self.proxyGetTickers(params)
        # {
        #     "method": "stream",
        #     "event": "MK",
        #     "data": [
        #       {
        #         "base": "USDT",
        #         "quote": "CPX",
        #         "price": 30000,
        #         "change_in_price": 92.30769231,
        #         "prev_price": 15600,
        #         "base_volume": 3015245.3306,
        #         "quote_volume": 101.81,
        #         "low_24hr": 15600,
        #         "high_24hr": 30000,
        #         "maker_fee": 0.25,
        #         "taker_fee": 0.25,
        #         "maker_fee_pro": 0.25,
        #         "taker_fee_pro": 0.25,
        #         "min_trade_amount": 0.0100001,
        #         "min_tick_size": 0.01,
        #         "min_order_value": 200,
        #         "max_size": 0,
        #         "max_order_value": 0,
        #         "max_size_market_order": 0
        #       }
        #     ]
        # }
        return self.parse_tickers(response['data'], symbols)

    def parse_ticker(self, ticker, market=None):
        timestamp = None
        # {
        #     "base": "USDT",
        #     "quote": "CPX",
        #     "price": 30000,
        #     "change_in_price": 92.30769231,
        #     "prev_price": 15600,
        #     "base_volume": 3015245.3306,
        #     "quote_volume": 101.81,
        #     "low_24hr": 15600,
        #     "high_24hr": 30000,
        #     "maker_fee": 0.25,
        #     "taker_fee": 0.25,
        #     "maker_fee_pro": 0.25,
        #     "taker_fee_pro": 0.25,
        #     "min_trade_amount": 0.0100001,
        #     "min_tick_size": 0.01,
        #     "min_order_value": 200,
        #     "max_size": 0,
        #     "max_order_value": 0,
        #     "max_size_market_order": 0
        # }
        base = self.safe_string(ticker, 'base')
        quote = self.safe_string(ticker, 'quote')
        symbol = base + '/' + quote
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': None,
            'high': ticker['high_24hr'],
            'low': ticker['low_24hr'],
            'bid': None,
            'bidVolume': None,
            'ask': None,
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': ticker['price'],
            'last': ticker['price'],
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': ticker['quote_volume'],
            'quoteVolume': ticker['base_volume'],
            'info': ticker,
        }

    def fetch_ohlcv(self, symbol, timeframe='1d', since=None, limit=None, params={}):
        pairs = symbol.split('/')
        base = pairs[0]
        quote = pairs[1]
        request = {
            'base_currency': base,
            'quote_currency': quote,
            'interval': self.timeframes[timeframe],
        }
        if since is None:
            request['start'] = int(self.milliseconds() / 1000 - 48 * 60 * 60)
        else:
            request['start'] = int(since / 1000)
        if limit is None:
            request['end'] = int(self.milliseconds() / 1000)
        else:
            duration = self.parse_timeframe(timeframe)
            request['end'] = int(self.sum(request['start'], limit * duration))
        response = self.proxyGetOhlcv(request)
        # {
        #     "status": "Success",
        #     "errorMessage": null,
        #     "data": [
        #       {
        #         "time": 1663113600000,
        #         "open": 0.025,
        #         "close": 0.025,
        #         "high": 0.025,
        #         "low": 0.025,
        #         "volume": 0
        #       },
        #     ]
        # }
        return self.parse_ohlcvs(response['data'], symbol, timeframe, since, limit)

    def parse_ohlc_vs(self, ohlcvs, market=None, timeframe='1m', since=None, limit=None):
        result = []
        for i in range(0, len(ohlcvs)):
            result.append(self.parse_ohlcv(ohlcvs[i], market))
        sorted = self.sort_by(result, 0)
        return sorted

    def parse_ohlcv(self, ohlcv, market=None):
        r = []
        r.append(int(ohlcv['time']))
        r.append(float(ohlcv['open']))
        r.append(float(ohlcv['high']))
        r.append(float(ohlcv['low']))
        r.append(float(ohlcv['close']))
        r.append(float(ohlcv['volume']))
        return r

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api]
        url += '/' + path
        if method == 'GET' and params:
            url += '?' + self.urlencode(params)
        if method == 'GET':
            return {
                'url': url,
                'method': method,
                'headers': headers,
                'params': {},
                'body': body,
            }
        body = params
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if code == 503:
            raise DDoSProtection(self.id + ' ' + str(code) + ' ' + reason + ' ' + body)
        if response is None:
            return  # fallback to default error handler
        if 'code' in response:
            status = self.safe_string(response, 'code')
            if status == '1':
                message = self.safe_string(response, 'msg')
                feedback = self.id + ' ' + body
                self.throw_exactly_matched_exception(self.exceptions, message, feedback)
                raise ExchangeError(feedback)
