# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import DDoSProtection


class xmeta(Exchange):

    def describe(self):
        return self.deep_extend(super(xmeta, self).describe(), {
            'id': 'xmeta',
            'name': 'xmeta',
            'countries': ['MN'],
            'rateLimit': 500,
            'requiresWeb3': False,
            'certified': False,
            # new metainfo interface
            'has': {
                'cancelOrder': False,
                'CORS': None,
                'createOrder': False,
                'fetchBalance': False,
                'fetchBidsAsks': False,
                'fetchClosedOrders': False,
                'fetchCurrencies': False,
                'fetchDepositAddress': False,
                'fetchDeposits': False,
                'fetchMarkets': False,
                'fetchMyTrades': False,
                'fetchOHLCV': False,
                'fetchOpenOrders': False,
                'fetchOrder': False,
                'fetchOrderBook': False,
                'fetchOrders': False,
                'fetchTicker': False,
                'fetchTickers': True,
                'fetchTrades': False,
                'fetchWithdrawals': False,
                'withdraw': None,
            },
            'urls': {
                'test': {
                    'market': 'https://sapi.coinhub.mn/v1',
                    'public': 'https://sapi.coinhub.mn/v1',
                },
                'logo': 'https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg',
                'api': {
                    'proxy': 'https://exchange-proxy.krypto.mn/x-meta',
                },
                'www': 'https://www.byte-trade.com',
                'doc': 'https://docs.byte-trade.com/#description',
            },
            'api': {
                'proxy': {
                    'get': [
                        'tickers',
                    ],
                },
            },
        })

    def fetch_tickers(self, symbols=None, params={}):
        response = self.proxyGetTickers(params)
        # {
        #     "code": 0,
        #     "msg": "Success",
        #     "data": {
        #         "list": [
        #             {
        #                 "symbol": "IHC_BUSD",
        #                 "assetId": 568,
        #                 "type": 2,
        #                 "baseAsset": "IHC",
        #                 "name": "Inflation Hedging Coin",
        #                 "logoUrl": "https://www.x-meta.com/static/bankicon/IHC_Icon.png",
        #                 "quoteAsset": "BUSD",
        #                 "price": "0.00072119",
        #                 "volume": "181553667.4028889300",
        #                 "baseVolume": "0",
        #                 "amount": "130972.4742196600",
        #                 "quoteVolume": "0",
        #                 "change24h": "0.16249548",
        #                 "low": "0.00072002",
        #                 "high": "0.00072997",
        #                 "open": "0.00072002",
        #                 "close": "0.00072119",
        #                 "time": 1645259100005,
        #                 "klineUrl": "",
        #                 "klineImageUrl": ""
        #             }
        #         ]
        #     },
        #     "timestamp": 1645259150941
        # }
        return self.parse_tickers(response['data']['list'], symbols)

    def parse_ticker(self, ticker, market=None):
        timestamp = self.safe_integer(ticker, 'time')
        # {
        #     symbol: 'IHC_BUSD',
        #     assetId: '568',
        #     type: '2',
        #     baseAsset: 'IHC',
        #     name: 'Inflation Hedging Coin',
        #     logoUrl: 'https://www.x-meta.com/static/bankicon/IHC_Icon.png',
        #     quoteAsset: 'BUSD',
        #     price: '0.00072121',
        #     volume: '182803667.4028889300',
        #     baseVolume: '0',
        #     amount: '131873.9867196500',
        #     quoteVolume: '0',
        #     change24h: '0.16527318',
        #     low: '0.00072002',
        #     high: '0.00072997',
        #     open: '0.00072002',
        #     close: '0.00072121',
        #     time: '1645259400004',
        #     klineUrl: '',
        #     klineImageUrl: ''
        # }
        symbolsSplitted = ticker['symbol'].split('_')
        symbol = '/'.join(symbolsSplitted)
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_number(ticker, 'high'),
            'low': self.safe_number(ticker, 'low'),
            'bid': None,
            'bidVolume': None,
            'ask': None,
            'askVolume': None,
            'vwap': None,
            'open': self.safe_number(ticker, 'open'),
            'close': self.safe_number(ticker, 'price'),
            'last': self.safe_number(ticker, 'price'),
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': self.safe_number(ticker, 'amount') / self.safe_number(ticker, 'price'),
            'quoteVolume': self.safe_number(ticker, 'amount'),
            'info': ticker,
        }

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api]
        url += '/' + path
        if params:
            url += '?' + self.urlencode(params)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if code == 503:
            raise DDoSProtection(self.id + ' ' + str(code) + ' ' + reason + ' ' + body)
        if response is None:
            return  # fallback to default error handler
        if 'code' in response:
            status = self.safe_string(response, 'code')
            if status == '1':
                message = self.safe_string(response, 'msg')
                feedback = self.id + ' ' + body
                self.throw_exactly_matched_exception(self.exceptions, message, feedback)
                raise ExchangeError(feedback)
