# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange
from ccxt.base.errors import ExchangeError


class trademn(Exchange):

    def describe(self):
        return self.deep_extend(super(trademn, self).describe(), {
            'id': 'trademn',
            'name': 'trademn',
            'countries': ['MN'],
            'rateLimit': 500,
            'requiresWeb3': False,
            'certified': False,
            # new metainfo interface
            'has': {
                'cancelOrder': False,
                'CORS': None,
                'createOrder': False,
                'fetchBalance': False,
                'fetchBidsAsks': False,
                'fetchClosedOrders': False,
                'fetchCurrencies': False,
                'fetchDepositAddress': False,
                'fetchDeposits': False,
                'fetchMarkets': False,
                'fetchMyTrades': False,
                'fetchOHLCV': False,
                'fetchOpenOrders': False,
                'fetchOrder': False,
                'fetchOrderBook': False,
                'fetchOrders': False,
                'fetchTicker': False,
                'fetchTickers': True,
                'fetchTrades': False,
                'fetchWithdrawals': False,
                'withdraw': None,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg',
                'api': {
                    'public': 'https://trade.mn:116/api/v2',
                    'proxy': 'https://service-api.krypto.mn/exchange-proxy',
                },
                'www': 'https://trade.mn',
                'doc': 'https://trade.mn',
            },
            'api': {
                'proxy': {
                    'get': [
                        'tickers/trademn',
                    ],
                },
            },
        })

    async def fetch_tickers(self, symbols=None, params={}):
        response = await self.proxyGetTickersTrademn(params)
        # {
        #     "data": {
        #         "DOT/MNT": {
        #           "change": 0,
        #           "lastPrice": 19000,
        #           "volume": 0
        #         }
        #     },
        #     "timestamp": 1659353716
        # }
        data = response['data']
        keys = list(data.keys())
        for i in range(0, len(keys)):
            data[keys[i]]['symbol'] = keys[i]
        return self.parse_tickers(response['data'], symbols)

    def parse_ticker(self, ticker, market=None):
        timestamp = None
        # {
        #     "change": 0,
        #     "lastPrice": 19000,
        #     "volume": 0,
        #     "symbol": "ARDX/MNT",
        #     "timestamp": 1659353716
        # }
        marketId = self.safe_string(ticker, 'symbol')
        symbol = marketId
        price = self.safe_number(ticker, 'lastPrice')
        baseVol = self.safe_number(ticker, 'volume')
        quoteVol = price * baseVol
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'high': None,
            'low': None,
            'bid': None,
            'bidVolume': None,
            'ask': None,
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': price,
            'last': price,
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': baseVol,
            'quoteVolume': quoteVol,
            'info': ticker,
        }

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api]
        url += '/' + path
        if params:
            url += '?' + self.urlencode(params)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if response is None:
            return  # fallback to default error handler
        if 'code' in response:
            status = self.safe_string(response, 'code')
            if status == '1':
                message = self.safe_string(response, 'msg')
                feedback = self.id + ' ' + body
                self.throw_exactly_matched_exception(self.exceptions, message, feedback)
                raise ExchangeError(feedback)
