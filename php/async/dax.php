<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\DDoSProtection;

class dax extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'dax',
            'name' => 'dax',
            'countries' => ['MN'],
            'rateLimit' => 500,
            'requiresWeb3' => false,
            'certified' => false,
            // new metainfo interface
            'has' => array(
                'cancelOrder' => false,
                'CORS' => null,
                'createOrder' => false,
                'fetchBalance' => false,
                'fetchBidsAsks' => false,
                'fetchClosedOrders' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchMarkets' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchTicker' => false,
                'fetchTickers' => true,
                'fetchTrades' => false,
                'fetchWithdrawals' => false,
                'withdraw' => null,
            ),
            'urls' => array(
                'test' => array(
                    'public' => 'https://api.dax.mn/v1',
                    'tv' => 'https://pairstats.dax.mn/tv',
                ),
                'logo' => 'https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg',
                'api' => array(
                    'public' => 'https://api.dax.mn/v1',
                    'tv' => 'https://pairstats.dax.mn/tv',
                ),
                'www' => 'https://dax.mn',
                'doc' => 'https://dax.mn',
            ),
            'api' => array(
                'public' => array(
                    'post' => array(
                        'graphql',
                    ),
                ),
                'tv' => array(
                    'get' => array(
                        'symbols',
                    ),
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        $response = yield $this->tvGetSymbols ($params);
        $markets = $response;
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'symbol');
            $base = strtoupper($this->safe_string($market, 'base-currency'));
            $quote = strtoupper($this->safe_string($market, 'quote-currency'));
            $baseId = $base;
            $quoteId = $quote;
            $symbol = $base . '/' . $quote;
            $entry = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => true,
                'taker' => null,
                'maker' => null,
                'type' => 'spot',
                'linear' => false,
                'inverse' => false,
                'contractSize' => 1,
                'spot' => true,
                'margin' => false,
                'future' => false,
                'swap' => false,
                'option' => false,
                'contract' => false,
                'settleId' => null,
                'settle' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'percentage' => false,
                'tierBased' => false,
                'feeSide' => 'get',
                'precision' => array(
                    'price' => null,
                    'amount' => null,
                    'cost' => null,
                ),
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => null,
                    'cost' => null,
                ),
                'info' => null,
            );
            $result[] = $entry;
        }
        return $result;
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $request = array(
            'operationName' => 'Pairs',
            'variables' => array(
                'sysPairWhere' => array(
                    'is_active' => array(
                        '_eq' => true,
                    ),
                ),
            ),
            'query' => 'query Pairs($sysPairWhere => sys_pair_bool_exp) array(\n  sys_pair(where => $sysPairWhere) array(\n    id\n    baseAsset array(\n      code\n      name\n      scale\n      total_market_cap\n      __typename\n    )\n    price array(\n      last_price\n      __typename\n    )\n    quoteAsset array(\n      code\n      name\n      scale\n      __typename\n    )\n    symbol\n    is_active\n    stats24 array(\n      change24h\n      __typename\n    )\n    base_tick_size\n    quote_tick_size\n    __typename\n  )\n  ex_pair_stats_24h array(\n    b24h_price\n    change24h\n    symbol\n    pair_id\n    last_price\n    updated_dt\n    vol\n    __typename\n  )\n)\n',
        );
        $response = yield $this->publicPostGraphql ($this->json(array_merge($request, $params)));
        // {
        //     "data" => {
        //         "sys_pair" => array(
        //             array(
        //                 "id" => 23,
        //                 "baseAsset" => array(
        //                     "code" => "MONT",
        //                     "name" => "MONT",
        //                     "scale" => 18,
        //                     "total_market_cap" => null,
        //                     "__typename" => "sys_asset"
        //                 ),
        //                 "price" => array(
        //                     "last_price" => 99,
        //                     "__typename" => "ex_pair_price"
        //                 ),
        //                 "quoteAsset" => array(
        //                     "code" => "MNT",
        //                     "name" => "Төгрөг",
        //                     "scale" => 2,
        //                     "__typename" => "sys_asset"
        //                 ),
        //                 "symbol" => "MONTMNT",
        //                 "is_active" => true,
        //                 "stats24" => array(
        //                     "change24h" => 0.00000000,
        //                     "__typename" => "ex_pair_stats_24h"
        //                 ),
        //                 "base_tick_size" => 1000000000000000000,
        //                 "quote_tick_size" => 1,
        //                 "__typename" => "sys_pair"
        //             ),
        //         ),
        //         "ex_pair_stats_24h" => array(
        //             array(
        //                 "b24h_price" => null,
        //                 "change24h" => 0.00000000,
        //                 "symbol" => "14MNT",
        //                 "pair_id" => 9,
        //                 "last_price" => null,
        //                 "updated_dt" => "2021-01-29T01:20:20",
        //                 "vol" => null,
        //                 "__typename" => "ex_pair_stats_24h"
        //             ),
        //         )
        //     }
        // }
        // merge volume from ex_pair_stats_24h
        for ($i = 0; $i < count($response['data']['sys_pair']); $i++) {
            $pair = $response['data']['sys_pair'][$i];
            $pair['vol'] = 0;
            for ($j = 0; $j < count($response['data']['ex_pair_stats_24h']); $j++) {
                $pairStats = $response['data']['ex_pair_stats_24h'][$j];
                if ($pair['symbol'] === $pairStats['symbol'] && $pairStats['vol']) {
                    $pair['vol'] = $pairStats['vol'];
                }
            }
        }
        return $this->parse_tickers($response['data']['sys_pair'], $symbols);
    }

    public function parse_ticker($ticker, $market = null) {
        $timestamp = null;
        // {
        //     id => '24',
        //     baseAsset => array(
        //       code => 'URG',
        //       name => 'URG',
        //       scale => '18',
        //       total_market_cap => null,
        //       __typename => 'sys_asset'
        //     ),
        //     $price => array( last_price => '540000000000000000', __typename => 'ex_pair_price' ),
        //     quoteAsset => array( code => 'MONT', name => 'MONT', scale => '18', __typename => 'sys_asset' ),
        //     $symbol => 'URGMONT',
        //     is_active => true,
        //     stats24 => array( change24h => '20.00000000', __typename => 'ex_pair_stats_24h' ),
        //     base_tick_size => '10000000000000000',
        //     quote_tick_size => '10000000000000000',
        //     __typename => 'sys_pair'
        // }
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $baseScale = $this->safe_number($ticker['baseAsset'], 'scale');
        $quoteScale = $this->safe_number($ticker['quoteAsset'], 'scale');
        $price = $this->safe_number($ticker['price'], 'last_price') / pow(10, $quoteScale);
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => null,
            'high' => null,
            'low' => null,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $price,
            'last' => $price,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_number($ticker, 'vol') / pow(10, $baseScale),
            'quoteVolume' => null,
            'info' => $ticker,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api];
        $url .= '/' . $path;
        if ($method === 'GET' && $params) {
            $url .= '?' . $this->urlencode($params);
        }
        if ($method === 'GET') {
            return array(
                'url' => $url,
                'method' => $method,
                'headers' => $headers,
                'params' => array(),
                'body' => $body,
            );
        }
        $body = $params;
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($code === 503) {
            throw new DDoSProtection($this->id . ' ' . (string) $code . ' ' . $reason . ' ' . $body);
        }
        if ($response === null) {
            return; // fallback to default error handler
        }
        if (is_array($response) && array_key_exists('code', $response)) {
            $status = $this->safe_string($response, 'code');
            if ($status === '1') {
                $message = $this->safe_string($response, 'msg');
                $feedback = $this->id . ' ' . $body;
                $this->throw_exactly_matched_exception($this->exceptions, $message, $feedback);
                throw new ExchangeError($feedback);
            }
        }
    }
}
