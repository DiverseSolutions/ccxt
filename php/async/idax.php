<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\DDoSProtection;

class idax extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'idax',
            'name' => 'idax',
            'countries' => ['MN'],
            'rateLimit' => 500,
            'requiresWeb3' => false,
            'certified' => false,
            // new metainfo interface
            'has' => array(
                'cancelOrder' => false,
                'CORS' => null,
                'createOrder' => false,
                'fetchBalance' => false,
                'fetchBidsAsks' => false,
                'fetchClosedOrders' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchMarkets' => true,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchTicker' => false,
                'fetchTickers' => true,
                'fetchTrades' => false,
                'fetchWithdrawals' => false,
                'withdraw' => null,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg',
                'api' => array(
                    'proxy' => 'https://exchange-proxy.krypto.mn/idax',
                ),
                'www' => 'https://idax.exchange',
                'doc' => 'https://dax.exchange',
            ),
            'api' => array(
                'proxy' => array(
                    'get' => array(
                        'tickers',
                        'markets',
                        'ohlcv',
                    ),
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        $response = yield $this->proxyGetMarkets ($params);
        // {
        //     "code" => "0",
        //     "msg" => "success",
        //     "message" => null,
        //     "data" => {
        //         "market" => {
        //             "market" => {
        //                 "MONT" => {
        //                     "ARDM/MONT" => array(
        //                         "limitVolumeMin" => 0.0001000000000000,
        //                         "symbol" => "ardmmont",
        //                         "showName" => "ARDM/MONT",
        //                         "marketBuyMin" => 1.00000000E-8,
        //                         "is_grid_open" => 0,
        //                         "multiple" => 0,
        //                         "fundRate" => "0.1",
        //                         "marketSellMin" => 0.0001000000000000,
        //                         "sort" => 2,
        //                         "etfOpen" => 0,
        //                         "newcoinFlag" => 0,
        //                         "volume" => 4,
        //                         "isOvercharge" => 0,
        //                         "depth" => "0.00000001,0.000001,0.0001",
        //                         "price" => 8,
        //                         "name" => "ARDM/MONT",
        //                         "limitPriceMin" => 1.00000000E-8,
        //                         "is_open_lever" => 0
        //                     ),
        //                     "URGX/MONT" => array(
        //                         "limitVolumeMin" => 0.0100000000000000,
        //                         "symbol" => "urgxmont",
        //                         "showName" => "URGX/MONT",
        //                         "marketBuyMin" => 0.0001000000000000,
        //                         "is_grid_open" => 0,
        //                         "multiple" => 0,
        //                         "fundRate" => "0.1",
        //                         "marketSellMin" => 0.0100000000000000,
        //                         "sort" => 3,
        //                         "etfOpen" => 0,
        //                         "newcoinFlag" => 0,
        //                         "volume" => 2,
        //                         "isOvercharge" => 0,
        //                         "depth" => "0.0001,0.001,0.01",
        //                         "price" => 4,
        //                         "name" => "URGX/MONT",
        //                         "limitPriceMin" => 0.0001000000000000,
        //                         "is_open_lever" => 0
        //                     }
        //             ),
        //             "klineScale" => array(
        //                 "1min",
        //                 "5min",
        //                 "15min",
        //                 "30min",
        //                 "60min",
        //                 "4h",
        //                 "1day",
        //                 "1week",
        //                 "1month"
        //             ),
        //             "marketSort" => array(
        //                 "MONT",
        //                 "USDT",
        //                 "BTC",
        //                 "ETH"
        //             ),
        //             "coinTagLangs" => array(),
        //             "home_symbol_show" => array(
        //                 "observed_symbol_list" => null,
        //                 "recommend_symbol_list" => array(
        //                     "ARDX1557/MONT",
        //                     "ARDM/MONT",
        //                     "USDT/MONT",
        //                     "BTC/MONT",
        //                     "ARDM/ARDX1557",
        //                     "ARDX1557/USDT",
        //                     "BTC/USDT",
        //                     "ETH/USDT"
        //                 )
        //             }
        //         ),
        //         "localPublicInfoTimeFormat" => "2022-04-05 11:15:20",
        //         "update_safe_withdraw" => null,
        //         "localPublicInfoTime" => 1649128520022
        //     }
        // }
        $marketsRaw = $response['data']['market']['market'];
        $result = array();
        $marketKeys = is_array($marketsRaw) ? array_keys($marketsRaw) : array();
        for ($i = 0; $i < count($marketKeys); $i++) {
            $k = $marketKeys[$i];
            $symbolKeys = is_array($marketsRaw[$k]) ? array_keys($marketsRaw[$k]) : array();
            for ($j = 0; $j < count($symbolKeys); $j++) {
                $id = $symbolKeys[$j];
                $pairs = explode('/', $id);
                $base = strtoupper($pairs[0]);
                $quote = strtoupper($pairs[1]);
                $baseId = strtolower($base);
                $quoteId = strtolower($quote);
                $symbol = $base . '/' . $quote;
                $entry = array(
                    'id' => $baseId . $quoteId,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'active' => true,
                    'taker' => null,
                    'maker' => null,
                    'type' => 'spot',
                    'linear' => false,
                    'inverse' => false,
                    'contractSize' => 1,
                    'spot' => true,
                    'margin' => false,
                    'future' => false,
                    'swap' => false,
                    'option' => false,
                    'contract' => false,
                    'settleId' => null,
                    'settle' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'percentage' => false,
                    'tierBased' => false,
                    'feeSide' => 'get',
                    'precision' => array(
                        'price' => null,
                        'amount' => null,
                        'cost' => null,
                    ),
                    'limits' => array(
                        'amount' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'price' => null,
                        'cost' => null,
                    ),
                    'info' => null,
                );
                $result[] = $entry;
            }
        }
        return $result;
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $response = yield $this->proxyGetTickers ($params);
        // {
        //     "data" => array(
        //         "100tbtc" => array(
        //             "amount" => 0,
        //             "close" => 1.658e-05,
        //             "high" => 1.658e-05,
        //             "low" => 1.658e-05,
        //             "open" => 1.658e-05,
        //             "rose" => 0,
        //             "vol" => 0
        //         ),
        //     ),
        //     "timestamp" => 1649129268000
        // }
        $tickers = array();
        $marketKeys = is_array($this->markets) ? array_keys($this->markets) : array();
        for ($i = 0; $i < count($marketKeys); $i++) {
            $marketKey = $marketKeys[$i];
            $market = $this->markets[$marketKey];
            if ($this->safe_value($response['data'], $market['id'])) {
                $ticker = $response['data'][$market['id']];
                $ticker['id'] = $market['id'];
                $ticker['symbol'] = $market['symbol'];
                $ticker['timestamp'] = $response['timestamp'];
                $tickers[] = $ticker;
            }
        }
        return $this->parse_tickers($tickers, $symbols);
    }

    public function parse_ticker($ticker, $market = null) {
        $timestamp = $this->safe_timestamp($ticker, 'timestamp');
        // {
        //     amount => '461.5968008644',
        //     close => '0.000343',
        //     high => '0.00036',
        //     low => '0.000335',
        //     open => '0.000352',
        //     rose => '-0.02556818',
        //     vol => '1338905.4964',
        //     id => 'adaeth',
        //     $symbol => 'ADA/ETH'
        // }
        $symbol = $ticker['symbol'];
        $baseVol = 0;
        $quoteVol = 0;
        if ($ticker['vol'] && $ticker['close']) {
            $baseVol = floatval($ticker['vol']);
            $quoteVol = floatval($baseVol) * floatval($ticker['close']);
        }
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $timestamp,
            'high' => floatval($ticker['high']),
            'low' => floatval($ticker['low']),
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => floatval($ticker['open']),
            'close' => floatval($ticker['close']),
            'last' => floatval($ticker['close']),
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVol,
            'quoteVolume' => $quoteVol,
            'info' => $ticker,
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '1d', $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $response = yield $this->proxyGetOhlcv (array(
            'symbol' => $market['id'],
        ));
        // array(
        //     {
        //         "amount" => 109411355.9396824,
        //         "close" => 19269.45,
        //         "ds" => "2022-10-10 00:00:00",
        //         "high" => 19552.87,
        //         "id" => 1665331200,
        //         "low" => 19130.39,
        //         "open" => 19534.96,
        //         "tradeId" => 0,
        //         "vol" => 5645.98794634
        //     }
        // )
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlc_vs($ohlcvs, $market = null, $timeframe = '1m', $since = null, $limit = null) {
        $result = array();
        if (strlen(!$ohlcvs)) {
            return array();
        }
        for ($i = 0; $i < count($ohlcvs); $i++) {
            $result[] = $this->parse_ohlcv($ohlcvs[$i], $market);
        }
        $sorted = $this->sort_by($result, 0);
        return $sorted;
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        $r = array();
        $r[] = intval($ohlcv['id']);
        $r[] = $ohlcv['open'];
        $r[] = $ohlcv['high'];
        $r[] = $ohlcv['low'];
        $r[] = $ohlcv['close'];
        $r[] = $ohlcv['vol'];
        return $r;
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api];
        $url .= '/' . $path;
        if ($method === 'GET' && $params) {
            $url .= '?' . $this->urlencode($params);
        }
        if ($method === 'GET') {
            return array(
                'url' => $url,
                'method' => $method,
                'headers' => $headers,
                'params' => array(),
                'body' => $body,
            );
        }
        $body = $params;
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($code === 503) {
            throw new DDoSProtection($this->id . ' ' . (string) $code . ' ' . $reason . ' ' . $body);
        }
        if ($response === null) {
            return; // fallback to default error handler
        }
        if (is_array($response) && array_key_exists('code', $response)) {
            $status = $this->safe_string($response, 'code');
            if ($status === '1') {
                $message = $this->safe_string($response, 'msg');
                $feedback = $this->id . ' ' . $body;
                $this->throw_exactly_matched_exception($this->exceptions, $message, $feedback);
                throw new ExchangeError($feedback);
            }
        }
    }
}
